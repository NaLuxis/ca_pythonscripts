 HELLO WORLD

Pour éxécuter plusieur façons :
- soit dans vs code je clique sur la flèche en haut à droite
- soit dans le terminal je fait python3 monFichier.py

Pour print : print("slt")

la norme est de 4 espace pour l'indentation
python utilise pas d'accolades ou autre

___________________________

VARIABLES AND TYPES

dans python tous est orienté objet, les variables et types n'ont pas besoin d'être déclaré pour être utilisé
chaque variables est un objet

Number
il y a plusieur genres de nombres
- integers pour les nombres entiers
- floating point nuber pour les nombres décimaux
- complex number (a voir dans un niveau plus avancé)

String
sont définie aussi bien avec des simple ou double quote "" ''
avec des double on peut juste mettre des apostrophes
https://docs.python.org/3/tutorial/introduction.html#strings : pour de la précision

Les opérateurs simple peuvent être éxecuté avec des number et strings mais pas entre eux

On peut assigner plusieur variables sur une seule ligne

On ne peut pas avoir des mixing operator entre les number et strings

___________________________

LISTS

c'est très similaire au array
ça contien tout types de variables et autant que je veux
ça peut aussi être très simplement itéré
essayer d'avoir un index qui existe pas ça fait une erreur
a une méthode append qui ajoute un seul élément à la fois

___________________________

BASIC OPERATORS

Arithmetic Operators
on a + - * / avec les number 
python suit l'ordre classique 1er * et / ensuite + et - tous ça de gauche à droite
il y a aussi % modulo qui renvois le reste entier d'une division
** exponnentiel c'est enu relation de puissance

Operators with strings
on peut fair de la concaténation de strings
on peut multiplier les strings

Operators with Lists
on peut joindre des lists ensemble
on peut les multiplier

___________________________

SRTING FORMATTING

python utilise le style C de formatage de strings pour en créer de nouvelle 
% est utilisé pour ajouter des argument specifiers comme %s pour les strings ou %d pour les integers
ça sert à ajouter une variable dans une string
si on en met plusieurs il faut les mettre dans un tuple entre paranthèses
un objets qui n'est pas une string peut aussi passer par %s

Les principaux a connaître :
%s - String (or any object with a string representation, like numbers)

%d - Integers

%f - Floating point numbers

%.<number of digits>f - Floating point numbers with a fixed amount of digits to the right of the dot.

%x/%X - Integers in hex representation (lowercase/uppercase)

___________________________

BASIC SRTING OPERATIONS

les strings sont des bouts de textes et on peut mettre n'importe quoi entre quotes
si j'ai besoin de single quotes dans la string je dois utiliser obligatoirement des double quotes
base 0
.index ne reconnait que le 1er
aString[3:7]
coupe la sring a partir de l'index 3 et fini au 6
si je met pas le 3 ça prend du début et sans le 7 ça va jusqu'à la fini
je peut mettre -5 pour dire le 5ème à partir de la fin
aString[3:7:2]
saute 1 caractère
aString[start:stop:step]
aString[::step] 
:: veut dire toute la string

___________________________

CONDITIONS

logique booléenne true or false
= assigner
== est égal à
!= n'est pas égal

Boolean operators
and 
or

The "in" operator
sert à savoir si un objets existe dans un conteneur itérable
Python utilise l'indentation de 4 espace à la place des {}
une instruction est évalué correct : 
- soit si si true est retourné
- soit si un objets pas considéré comme vide est passé

The 'is' operator
is ne regarde pas les valeurs comme == mais l'instance elle même

The "not" operator
not inverse l'expression

___________________________

LOOPS

2 types de boucle : for et while

The "for" loop
ça itère sur une séquence donnée
for peut itéré avec les fonctions :
- range : retourne une nouvelle list de numbers 
- xrange : retourne un itérateur 
python 3 utilise range comme agirais xrange
c'est base 0

"while" loops
ça répète jusqu'à ce que la condition soit true

"break" and "continue" statements
break sert à sortir d'une boucle
continue sert à passer le bloc et retourner à la boucle

Can we use "else" clause for loops?
on peut utiliser else dans les boucle 
si la condition de la boucle échoue on passe dans le else
avec un break dans la boucle le else est passé aussi
avec un continue le else est quand même éxecuté
